import numpy as np

x = np.array([10, 20, 30])
length = len(x)


x = np.array([10, 20, 30])
x0 = x[0]
x2 = x[2]
x[1] = 42

x = np.array([9, 1, 5, 6, 2, 0, 4, 3, 8, 7])
first_half = x[0:5]
last_8 = x[2:]
middle = x[1:9]

x = np.array([9, 1, 5, 6, 2, 0, 4, 3, 8, 7])
even = x[::2]
odd = x[1::2]
mul_3 = x[::3]
every_2 = x[3:9:2]

x = np.array([1, 0, 0, 0, 1])
y = x[1:4]
z = y.copy()

z[0] = 9
print(x, y, z)

y[1] = 7
print(x, y, z)

x = np.array([9, 1, 5, 6, 2, 0, 4, 3, 8, 7])
second_to_last = x[-2]
reversed_x = x[::-1]
first_5_reversed = x[4::-1]
last_5_reversed = x[:4:-1]

my_2d_array = np.array([
    [1, 4, 7],
    [2, 5, 8],
    [3, 6, 9]
])
my_2d_array[1, 1] = 42

array2d = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])
x = array2d[:,3:] # Get all rows, get cols starting at col 3
y = array2d[::2,:] # Get all even rows, get all cols
z = array2d[::2,::2] # Get all even rows, get all even cols

array2d = np.array([
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
])

array2d = np.array([
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
])
array2d[:,0:2] = 1
array2d[2:,:] = 2
array2d[0:3,1:4] = 3

people_data = np.array([
    [27, 67, 1.65],
    [35, 81, 1.84],
    [29, 55, 1.60],
    [41, 73, 1.79]
])
anna_row = people_data[2,:]
bob_age_height = people_data[3,::2]
ages_col = people_data[:,0]
weight_dexter_bob = people_data[1::2,1]


import numpy as np
table = np.array([
    [ 1,  2,  3,  4,  5],
    [ 6,  7,  8,  9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20]
])
col = table[0:4,1]
row = table[2,0:5]
center = table[1:3,1:4]

# Alternative answer (using default values)
col = table[:,1]
row = table[2,:]
center = table[1:-1,1:-1]

import numpy as np
table = np.array([
    [ 1,  2,  3,  4,  5],
    [ 6,  7,  8,  9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20]
])
col = table[0:4,1]
row = table[2,0:5]
center = table[1:3,1:4]

# Alternative answer (using default values)
col = table[:,1]
row = table[2,:]
center = table[1:-1,1:-1]

def add_list_values(list1, list2):
    result = []
    N = len(list1)
    for i in range(N):
        result.append(list1[i] + list2[i])
    return result
    
    import time
import random
random.seed(0)

# Generate test lists
list1 = [random.randint(0, 1000) for _ in range(100000)]
list2 = [random.randint(0, 1000) for _ in range(100000)]

# Measure the execution time of adding lists
start = time.time()
add_list_values(list1, list2)
end = time.time()
time_list = end - start

# Write your code below
# Create ndarrays from the lists
x1 = np.array(list1)
x2 = np.array(list2)

# Measure the execution time of adding ndarrays
start = time.time()
x3 = x1 + x2
end = time.time()
time_array = end - start

# Compute the execution time ratio
ratio = time_list / time_array
print(ratio)

people_data = np.array([
    [27, 67, 1.65],
    [35, 81, 1.84],
    [29, 55, 1.60],
    [41, 73, 1.79]
])

people_data = np.array([
    [27, 67, 1.65],
    [35, 81, 1.84],
    [29, 55, 1.60],
    [41, 73, 1.79]
])
w = people_data[:,1]
h = people_data[:,2]
BMI = w / (h * h)

scores = np.array([
    [46, 74, 52, 81],
    [75, 45, 67, 53],
    [67, 80, 73, 63],
    [59, 94, 43, 78]
])
scores_day1 = scores[:,0:2]
scores_day2 = scores[:,2:4]

shape1 = scores_day1.shape
shape2 = scores_day2.shape
print(shape1, shape2)

total_scores = scores_day1 + scores_day2

print(total_scores)

total_scores = np.array([
 [ 98, 155],
 [142,  98],
 [140, 143],
 [102, 172]
])
scores_game1 = total_scores[:,0]
scores_game2 = total_scores[:,1]

min_game1 = scores_game1.min()
max_game1 = scores_game1.max()

min_game2 = scores_game2.min()
max_game2 = scores_game2.max()

total_scores = np.array([
 [ 98, 155],
 [142,  98],
 [140, 143],
 [102, 172]
])
scores_game1 = total_scores[:,0]
scores_game2 = total_scores[:,1]

min_game1 = scores_game1.min()
max_game1 = scores_game1.max()

min_game2 = scores_game2.min()
max_game2 = scores_game2.max()

total_scores = np.array([
 [ 98, 155],
 [142,  98],
 [140, 143],
 [102, 172]
])
max_game_scores = total_scores.max(axis=0)
min_game_scores = total_scores.min(axis=0)
max_people_scores = total_scores.max(axis=1)
min_people_scores = total_scores.min(axis=1)

total_scores = np.array([
 [ 98, 155],
 [142,  98],
 [140, 143],
 [102, 172]
])
total_people_score = total_scores.sum(axis=1)
max_score = total_people_score.max()

import numpy as np
x = np.array([
 [7., 9., 2., 2.],
 [3., 2., 6., 4.],
 [5., 6., 5., 7.]
])
ones = np.ones(x.shape)
x -= ones

import numpy as np
x = np.array([
 [7., 9., 2., 2.],
 [3., 2., 6., 4.],
 [5., 6., 5., 7.]
])
ones = np.ones(x.shape)
x -= ones


x = np.array([3, 2, 4, 5])
r = 1 / x

x = np.array([
    [4, 2, 1, 5],
    [6, 7, 3, 8]
])
y = np.array([
    [1],
    [2]
])
z = x + y
print(z)

x = np.array([
    [4, 2, 1, 5],
    [6, 7, 3, 8]
])
y = np.array([1, 2, 3, 4])
z = x + y

x = np.array([
    [1],
    [2],
    [3]
])
y = np.array([1, 2, 3])
z = x + y

dice1 = np.array([1, 2, 3, 4, 5, 6])
dice2 = np.array([
    [1],
    [2],
    [3],
    [4],
    [5],
    [6]
])
dice_sums = dice1 + dice2

x = np.array([1, 2, 3, 4])
y = np.array([
    [1], 
    [2], 
    [3], 
    [4]
])
shape_x = x.shape
shape_y = y.shape
print(shape_x, shape_y)

# Step 1.
# Add 1's to the left of shape of x until it becomes 2-dimensional
shape_x_step1 = (1, 4)
shape_y_step1 = (4, 1)

# Step 2.
# We got a 1 and a 4 in the first position. Make the 1 into a 4.
shape_x_step2 = (4, 4)

# We got a 1 and a 4 in the second position. Make the 1 into a 4.
shape_y_step2 = (4, 4)

# Step 3.
# Both have the same shape, so they can be added.
error = False

dice1 = np.array([i for i in range(1, 7)])
dice2 = dice1.reshape((6, 1))
dice_sums = dice1 + dice2

import numpy as np
x = np.array([
    [44, 70, 49,  2, 19],
    [62, 68, 64, 18, 12],
    [91, 90, 63, 98, 69],
    [22,  9, 98, 16, 58],
    [47, 92, 39,  8, 19],
    [ 1, 41,  3, 15, 71],
    [92, 18, 37, 42,  5]
])
first_four = x[:4,:]
last_column = x[:,-1]

import numpy as np
x = np.array([
    [44, 70, 49,  2, 19],
    [62, 68, 64, 18, 12],
    [91, 90, 63, 98, 69],
    [22,  9, 98, 16, 58],
    [47, 92, 39,  8, 19],
    [ 1, 41,  3, 15, 71],
    [92, 18, 37, 42,  5]
])
first_four = x[:4,:]
last_column = x[:,-1]

import numpy as np
x = np.array([
    [44, 70, 49,  2, 19],
    [62, 68, 64, 18, 12],
    [91, 90, 63, 98, 69],
    [22,  9, 98, 16, 58],
    [47, 92, 39,  8, 19],
    [ 1, 41,  3, 15, 71],
    [92, 18, 37, 42,  5]
])
first_four = x[:4,:]
last_column = x[:,-1]

import numpy as np
sars = np.genfromtxt('sars.csv', delimiter=',')
first_five = sars[:5,:]

# Alternative answer
sars = np.genfromtxt('sars.csv', delimiter=',')
first_five = sars[:5]
print(first_five)https://github.com/armlynobinguar/Getting-Started-on-Data-Engineering/fork

np.set_printoptions(suppress=True)
sars = sars[1:,:]
sars = sars[:,1:]
print(sars[:5,:])

total = sars[:,2]
max_cases = total.max()

female = sars[:,0]
male = sars[:,1]
more_female_cases = female > male
equal_cases = female == male
num_more_female = more_female_cases.sum()
num_equal = equal_cases.sum()
num_more_male = len(sars) - num_more_female - num_equal

any_less_1 = (sars[:,-1] < 1).any()
all_less_50 = (sars[:,-1] < 50).all()

deaths = sars[:,3]
fatality_ratio = sars[:,4]
death_gt_100_ratio_lt_10 = (deaths >= 100) & (fatality_ratio <= 10)
count = death_gt_100_ratio_lt_10.sum()deaths = sars[:,3]
fatality_ratio = sars[:,4]
death_gt_100_ratio_lt_10 = (deaths >= 100) & (fatality_ratio <= 10)
count = death_gt_100_ratio_lt_10.sum()

mask = fatality_ratio >= 10
num_deaths = deaths[mask]
print(num_deaths)

mask_zeros = sars == 0
zeros = sars[mask_zeros]
num_zeros = len(zeros)

mask_zeros = sars == 0
zeros = sars[mask_zeros]
num_zeros = len(zeros)

non_zero_deaths = sars[:,3] > 0
sars_subtable = sars[non_zero_deaths,2:]

import numpy as np
x = np.array([1, 2, 3, 4])
x[0] = 5.5
print(x)
